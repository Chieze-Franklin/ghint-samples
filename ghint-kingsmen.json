{
    "options": {
        "detectPull": false
    },
    "checks": {
        "Branch name format should be: {pivotal tracker id}-{story type}-{story summary}": {
            "script": "/^[\\d]+-((ft-)|(ch-)|(bg-))[a-z0-9\\-]+$/.test(branch.name)",
            "message": [
                "Branches should be named using the following format:",
                "{pivotal tracker id}-{story type}-{story summary}",
                "",
                "{pivotal tracker id} - The Id of the pivotal tracker story associated with the commit.",
                "",
                "{story type} - Indicates the context of the branch and should be one of:",
                "    * bg = Bug",
                "    * ch = Chore",
                "    * ft = Feature",
                "",
                "{story summary} - Short 2-3 words summary about what the branch contains",
                "    This can contain digits, lowercase alphabets, dash.",
                "",
                "Example: 111504508-ft-resources-rest-endpoints"
            ]
        },
        "Commit message should consist of header, body, footer": {
            "script": [
                "const message = commit.commit.message.trim()",
                "const messageLines = message.split('\\n')",
                "const len = messageLines.length",
                "if (len >= 5) {",
                "   if (messageLines[0].trim() !== '' && messageLines[1].trim() === '' && messageLines[2].trim() !== ''",
                "   && messageLines[len - 1].trim() !== '' && messageLines[len - 2].trim() === '' && messageLines[len - 3].trim() !== '') {",
                "       return true;",
                "   }",
                "}",
                "return false;"
            ],
            "message": "A commit message consists of a header, a body and a footer, separated by blank lines."
        },
        "Commit message should not have lines longer than 100 characters": {
            "script": [
                "const message = commit.commit.message.trim()",
                "const messageLines = message.split('\\n')",
                "return !(messageLines.find(line => line.length > 100));"
            ],
            "message": [
                "Any line of the commit message cannot be longer than 100 characters!",
                "This allows the message to be easier to read on github as well as in various git tools. "
            ]
        }
    }
}